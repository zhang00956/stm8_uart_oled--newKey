/**
  ******************************************************************************
  * @file    GPIO/GPIO_Toggle/stm8l15x_it.c
  * @author  MCD Application Team
  * @version V1.3.0
  * @date    07/14/2010
  * @brief   Main Interrupt Service Routines.
  *          This file provides template for all peripherals interrupt service routine.
  ******************************************************************************
  * @copy
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
  */

/* Includes ------------------------------------------------------------------*/
#include "stm8l15x_it.h"
#include "bsp.h"
#include "string.h"
#include "uart.h"
#include "key.h"
#include <LCD_ZK.H>
#include "low_power.h"


u8 USART_RX_BUF[USART_REC_LEN];//缓冲区
volatile u16 USART_RX_STA = 0;//接受状态
volatile u16 TIM2_Conut = 0;
volatile u16 TIM3_Conut = 0;
extern u8 AppState;
extern u8 keyPassValue;
extern u8 led_on;//第一次按按键点亮屏幕
extern volatile u8 Power_charge;
extern u8 PowerMsg[4];
/** @addtogroup STM8L15x_StdPeriph_Examples
  * @{
  */

/** @addtogroup GPIO_Toggle
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Public functions ----------------------------------------------------------*/

#ifdef _COSMIC_
/**
  * @brief  Dummy interrupt routine
  * @param  None
  * @retval None
*/
INTERRUPT_HANDLER(NonHandledInterrupt, 0)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
#endif

/**
  * @brief  TRAP interrupt routine
  * @param  None
  * @retval None
*/
INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  FLASH Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(FLASH_IRQHandler, 1)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  DMA1 channel0 and channel1 Interrupt routine.
  * @param  None
  * @retval None
  */
extern volatile  unsigned short  ADC_ConvertedValue[ ];
extern volatile  float ADC1_Channel1_Battery, ADC1_Channel_Vrefint;


INTERRUPT_HANDLER(DMA1_CHANNEL0_1_IRQHandler, 2)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */




}
/**
  * @brief  DMA1 channel2 and channel3 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(DMA1_CHANNEL2_3_IRQHandler, 3)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  RTC Interrupt routine.
  * @param  None
  * @retval None
  */


INTERRUPT_HANDLER(RTC_IRQHandler, 4)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    if (((RTC->ISR2) & 0x4) == 0x4) {


    }
}
/**
  * @brief  External IT PORTE/F and PVD Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTIE_F_PVD_IRQHandler, 5)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    if( PWR_PVDGetITStatus( ) == SET) { //如果是PVD的中断
        if(PWR_GetFlagStatus(PWR_FLAG_PVDOF) == SET) { //电源电压低于PVD
            //此处添加报警处理

            //LCD_GLASS_DisplayString( "PWR"); //test

        }

        PWR_PVDClearFlag( );//清除PVD中断标志位
    }



}

/**
  * @brief  External IT PORTB Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTIB_IRQHandler, 6)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  External IT PORTD Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTID_IRQHandler, 7)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  External IT PIN0 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI0_IRQHandler, 8)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  External IT PIN1 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI1_IRQHandler, 9)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
//  u8 test = 0;
    disableInterrupts();
    if(EXTI_GetITStatus(EXTI_IT_Pin1)) {
        
//        test = GPIO_ReadInputDataBit(ADCPORT, ADCPIN);
        if(GPIO_ReadInputDataBit(ADCPORT, ADCPIN) == SET) {
//        if(test)
//        {
            GPIO_Init(ADCPORT, ADCPIN, GPIO_Mode_In_FL_No_IT);
//            Power_charge = 1;//不再需要，可以用poll模式读
        }
    EXTI_ClearITPendingBit(EXTI_IT_Pin1);//清除标志位    
    }
    enableInterrupts();
}

/**
  * @brief  External IT PIN2 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI2_IRQHandler, 10)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    disableInterrupts();
    if(EXTI_GetITStatus(EXTI_IT_Pin2)) {
        /* Cleat Interrupt pending bit */
        EXTI_ClearITPendingBit (EXTI_IT_Pin2);//清除中断标志
        /* Check if the interrupt is from the COUNT_A pin or not */
//            if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_2) == RESET)
//            {
        GPIO_Init(GPIOC, GPIO_Pin_2, GPIO_Mode_In_PU_No_IT);
//            }
    }
    enableInterrupts();
}

/**
  * @brief  External IT PIN3 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI3_IRQHandler, 11)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  External IT PIN4 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI4_IRQHandler, 12)
{
    /* In order to detect unexpected events during development,

       it is recommended to set a breakpoint on the following instruction.
    */
    //EXTI_ClearITPendingBit(EXTI_IT_Pin4);
}

/**
  * @brief  External IT PIN5 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI5_IRQHandler, 13)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  External IT PIN6 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI6_IRQHandler, 14)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    disableInterrupts();
    if(EXTI_GetITStatus(EXTI_IT_Pin6)) {

//        delayms(5);//消抖
        /* Check if the interrupt is from the COUNT_A pin or not */
        if(GPIO_ReadInputDataBit(KEYPORT, KEYPIN) == RESET) {
            GPIO_Init(KEYPORT, KEYPIN, GPIO_Mode_In_PU_No_IT);
//            led_on = 0;
//            OLED_Display_On();
        }
        /* Cleat Interrupt pending bit */
        EXTI_ClearITPendingBit (EXTI_IT_Pin6);//清除中断标志        
    }
    enableInterrupts();
}

/**
  * @brief  External IT PIN7 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(EXTI7_IRQHandler, 15)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  LCD start of new frame Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(LCD_IRQHandler, 16)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  CLK switch/CSS/TIM1 break Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(SWITCH_CSS_BREAK_DAC_IRQHandler, 17)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    //判断是否是时钟切换中断
    if(CLK->SWCR & CLK_SWCR_SWIF == 0X08) {
        // LCD_GLASS_DisplayString("switch!");
        CLK->SWCR &= (~CLK_SWCR_SWIF);//清除中断标志位
    }
}

/**
  * @brief  ADC1/Comparator Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(ADC1_COMP_IRQHandler, 18)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  TIM2 Update/Overflow/Trigger/Break Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(TIM2_UPD_OVF_TRG_BRK_IRQHandler, 19)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    TIM2_Conut++;
    if(TIM2_Conut >= 500) { //累计1000毫秒记数
        TIM2_Conut = 0;
        if(USART_RX_BUF[0] == CHE_LI) {
            GPIO_ToggleBits(GPIOB , GPIO_Pin_6); //辅助
            GPIO_ToggleBits(GPIOB , GPIO_Pin_7);
            GPIO_ToggleBits(GPIOA , GPIO_Pin_4);//yello
            GPIO_ToggleBits(GPIOA , GPIO_Pin_5);//green
        } else if(USART_RX_BUF[0] == FEI_CHE_LI) {
            GPIO_ToggleBits(GPIOB , GPIO_Pin_6); //辅助
            GPIO_ToggleBits(GPIOB , GPIO_Pin_7);
            GPIO_ToggleBits(GPIOA , GPIO_Pin_4);//yello
        } else {
            GPIO_ToggleBits(GPIOA , GPIO_Pin_5);//green
        }
//    GPIO_ToggleBits(GPIOB , GPIO_Pin_6); //辅助
//    GPIO_ToggleBits(GPIOB , GPIO_Pin_7);
    }

    TIM2_ClearITPendingBit(TIM2_IT_Update); //清除中断标志
}

/**
  * @brief  Timer2 Capture/Compare Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(TIM2_CAP_IRQHandler, 20)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}


/**
  * @brief  Timer3 Update/Overflow/Trigger/Break Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(TIM3_UPD_OVF_TRG_BRK_IRQHandler, 21)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    TIM3_Conut++;
    if(TIM3_Conut >= 100) { //10ms一次中断
        TIM3_Conut = 0;
//        disableInterrupts();
        if(Power_charge) {
            uart_txarr(&PowerMsg[0], 1, 1); //充电
        } else {
            uart_txarr(&PowerMsg[1], 1, 1);//断开
        }
//        enableInterrupts();
    }
    TIM3_ClearITPendingBit(TIM3_IT_Update); //清除中断标志
}
/**
  * @brief  Timer3 Capture/Compare Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(TIM3_CAP_IRQHandler, 22)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  TIM1 Update/Overflow/Trigger/Commutation Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_COM_IRQHandler, 23)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  TIM1 Capture/Compare Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(TIM1_CAP_IRQHandler, 24)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  TIM4 Update/Overflow/Trigger Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(TIM4_UPD_OVF_TRG_IRQHandler, 25)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}
/**
  * @brief  SPI1 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(SPI1_IRQHandler, 26)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @brief  USART1 TX Interrupt routine.
  * @param  None
  * @retval None
  */

INTERRUPT_HANDLER(USART1_TX_IRQHandler, 27)
{

    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */



}

/**
  * @brief  USART1 RX Interrupt routine.
  * @param  None
  * @retval None
  */

/*
中文编码都是从A1开始
*/

INTERRUPT_HANDLER(USART1_RX_IRQHandler, 28)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
    u8 Res;

    if(USART_GetITStatus(USART1, USART_IT_RXNE) == SET) { //接收中断(接收到的数据必须是0x0d 0x0a结尾)
        Res = USART_ReceiveData8(USART1);//(USART1->DR);//读取接收到的数据

        if((USART_RX_STA & 0x8000) == 0) { //接收未完成
            if(USART_RX_STA & 0x4000) { //接收到了0x0d
                if(Res != 0x0a)
                    USART_RX_STA = 0;//接收错误,重新开始
                else
                    USART_RX_STA |= 0x8000;//接收完成了
            } else { //还没收到0X0D
                if(Res == 0x0d)
                    USART_RX_STA |= 0x4000;
                else {
                    USART_RX_BUF[USART_RX_STA & 0X3FFF] = Res ;
                    USART_RX_STA++;
                    if(USART_RX_STA > (USART_REC_LEN - 1))USART_RX_STA = 0; //接收数据错误,重新开始接收
                }
            }
        }        
        USART_ClearITPendingBit(USART1, USART_IT_RXNE); //情况中断标志位
    }
}

/**
  * @brief  I2C1 Interrupt routine.
  * @param  None
  * @retval None
  */
INTERRUPT_HANDLER(I2C1_IRQHandler, 29)
{
    /* In order to detect unexpected events during development,
       it is recommended to set a breakpoint on the following instruction.
    */
}

/**
  * @}
  */

/**
  * @}
  */

/******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

